AWSTemplateFormatVersion: 2010-09-09
Description: Uptycs SSM State Manager
Metadata:
  cfn-lint:
    config:
      ignore_checks:
        - E9007  # managed policy does not support partition
        - E9008  # managed policy does not support partition
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: "Uptycs Configuration Parameters"
        Parameters:
          - UptycsSsmPackageBucketFolder
          - UptycsSsmPackageName
          - UptycsSsmPackageBucket
      - Label:
          default: "Uptycs SSM Association Paramters"
        Parameters:
          - UptycsAgentTargetKey
          - UptycsAgentTargetValue
          - UptycsScheduleRate
          - MaxConcurrency
          - MaxErrors
          - ComplianceSeverity
    ParameterLabels:
      UptycsSsmPackageBucketFolder:
        default: "The folder where the zip and manifest files are located"
      UptycsSsmPackageName:
        default: "The name of the Uptycs distributor package that we will create"
      UptycsSsmPackageBucket:
        default: "The s3 bucket where the manifest and zip files are located"
      UptycsAgentTargetKey:
        default: "The Tag Key Name used to Target instances"
      UptycsScheduleRate:
        default: "The rate as which the association will run"
      UptycsAgentTargetValue:
        default: "The Tag Key Value used to Target instances"
      MaxConcurrency:
        default: "The maximum number of targets allowed to run the association at the same time"
      MaxErrors:
        default: "The number of errors that are allowed before the run stops"
      ComplianceSeverity:
        default: "The severity level that is assigned to the association."
Parameters:
  UptycsSsmPackageBucketFolder:
    Type: String
    Description: Uptycs folder in s3 bucket
    Default: uptycs
  UptycsSsmPackageName:
    Description: Uptycs Distributor package name
    Type: String
    Default: UptycsAgent
  UptycsSsmPackageBucket:
    Description: SSM Distributor package that installs the Falcon agent
    Type: String
    Default: uptycs-dist-qjrzwm
  UptycsAgentTargetKey:
    Description: Value of the Tag Key used to define the automation target
    Default: "SENSOR_DEPLOY"
    Type: String
  UptycsAgentTargetValue:
    Description: Value of the Tag Value used to define the automation target
    Default: "TRUE"
    Type: String
  UptycsScheduleRate:
    Description: SSM assocation application cycle (minimum 30 minutes)
    Type: String
    Default: 60 minutes
  MaxConcurrency:
    Description: Percentage of total targets that SSM State Manager should run the SSM Automation concurrently
    Type: String
    Default: 100%
  MaxErrors:
    Description: Error threshold percentage before
    Type: String
    Default: 25%
  ComplianceSeverity:
    Description: The Severity to apply to the State Manager Alert
    Type: String
    AllowedValues:
      - 'CRITICAL'
      - 'HIGH'
      - 'LOW'
      - 'MEDIUM'
      - 'UNSPECIFIED'
Resources:
  # SSM Association
  UptycsSSMAssociation:
    Type: AWS::SSM::Association
    Properties:
      Name: 'AWS-ConfigureAWSPackage'
      Targets:
        - Key: !Sub tag:${UptycsAgentTargetKey}
          Values:
            - !Ref UptycsAgentTargetValue

      ScheduleExpression: !Sub rate(${UptycsScheduleRate})
      Parameters:
        action:
          - 'Install'
        additionalArguments:
          - '{}'
        installationType:
          - 'Uninstall and reinstall'
        name:
          - 'UptycsAgent'
      AssociationName: 'Uptycs'
      ComplianceSeverity: !Ref ComplianceSeverity
      ApplyOnlyAtCronInterval: false
      MaxConcurrency: !Ref MaxConcurrency
      MaxErrors: !Ref MaxErrors
  # SSM Automation Document to install SSM Distribution
  UptycsAgentDeploymentSSMDocument:
    Type: AWS::SSM::Document
    Properties:
      Name: UptycsAutomationDoc
      DocumentType: Automation
      Content:
        description: Run Document for installing the Uptycs osquery agent .
        schemaVersion: '0.3'
        assumeRole: '{{AutomationAssumeRole}}'
        parameters:
          AWSRegion:
            type: String
          InstallerParams:
            type: String
            default: ''
            description: (Optional) Enter CrowdStrike's install time params here. For more info refer Falcon console documentation.
          Action:
            type: String
            allowedValues:
              - Install
              - Uninstall
            description: (Required) Specify whether or not to install or uninstall the package.
            default: Install
          InstallationType:
            type: String
            allowedValues:
              - Uninstall and reinstall
            description: '(Optional) Specify the type of installation. Uninstall and reinstall: The application is taken offline until the reinstallation process completes. In-place update: The application is available while new or updated files are added to the installation.'
            default: Uninstall and reinstall
          PackageName:
            type: String
            description: 'Uptycs package name.'
            default: !Ref UptycsSsmPackageName
          PackageVersion:
            type: String
            description: 'Package Version'
            default: ''
          InstanceIds:
            type: StringList
          Targets:
            type: MapList
            default: [ ]
          AutomationAssumeRole:
            type: String
        mainSteps:
          - name: ExecuteDistributorPackage
            action: 'aws:runCommand'
            inputs:
              Targets: '{{ Targets }}'
              InstanceIds: '{{ InstanceIds }}'
              DocumentName: AWS-ConfigureAWSPackage
              Parameters:
                name: '{{PackageName}}'
                action: '{{Action}}'
                version: '{{PackageVersion}}'
  # IAM Role for SSM Automation Document
  SSMAutomationAssumeRole:
    Type: AWS::IAM::Role
    Properties:
      Description: "Uptycs agent install role"
      Path: /
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ssm.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AdministratorAccess

  #Custom Lambda backed Resource for creating the SSM Distributor Package
  CreateSSMDistributorPackage:
    Type: 'Custom::CreateSSMDistributorPackage'
    DependsOn:
      - CreateSSMDistributorPackageExecutePermission
    Properties:
      ServiceToken: !GetAtt 'CreateSSMDistributorLambda.Arn'
      package_name: !Ref UptycsSsmPackageName
      s3_bucket: !Ref UptycsSsmPackageBucket
      s3_prefix: !Ref UptycsSsmPackageBucketFolder
  #Permission for CFN to invoke custom lambda backed resource
  CreateSSMDistributorPackageExecutePermission:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName: !GetAtt 'CreateSSMDistributorLambda.Arn'
      Principal: 'cloudformation.amazonaws.com'
  #Lambda Function that creates the SSM Distributor Package
  CreateSSMDistributorLambda:
    Type: 'AWS::Lambda::Function'
    Properties:
      Handler: index.handler
      Runtime: python3.7
      MemorySize: 512
      Role: !GetAtt 'CreateSSMDistributorLambdaRole.Arn'
      Timeout: 300
      Code:
        ZipFile: |
          import json
          import boto3
          import botocore
          import os
          import cfnresponse
          import logging
          from botocore.vendored import requests

          logger = logging.getLogger()
          logger.setLevel(logging.INFO)

          def handler(event, context):
              s3 = boto3.client('s3')
              ssm = boto3.client('ssm')
              package_name = event['ResourceProperties']['package_name']
              s3_bucket = event['ResourceProperties']['s3_bucket']
              s3_prefix = event['ResourceProperties']['s3_prefix']
              logger.info('EVENT Received: {}'.format(event))
              response_data = {}
              eventType = event['RequestType']

              if eventType == 'Create':
                  try:
                      logger.info('Event = ' + eventType)
                      manifestFile = s3_prefix + "/manifest.json"
                      file_object = s3.get_object(Bucket=s3_bucket,Key=manifestFile)
                      manifest_str = file_object['Body'].read().decode('utf-8')
                      manifest_json = json.loads(manifest_str)
                      version = manifest_json.get('version')
                      logger.info('Version {}'.format(version))
                      createPackage = ssm.create_document(Content=manifest_str, 
                          Attachments=[
                              {
                                  'Key': 'SourceUrl',
                                  'Values': [
                                      f'https://{s3_bucket}.s3.amazonaws.com/{s3_prefix}',
                                  ]
                              },
                          ], 
                          Name=package_name,  
                          DocumentType='Package')

                      logger.info('Distributor Package: {}'.format(createPackage))
                      response_data['Message'] = 'Package created successfully'
                      cfnresponse.send(event, context, cfnresponse.SUCCESS, response_data)
                  except Exception as e:
                      logger.error(f'Error creating package: {e}')
                      response_data['Message'] = 'Error creating package'
                      cfnresponse.send(event, context, cfnresponse.FAILED, response_data)
              elif eventType == 'Delete':
                  logger.info(f'Request Type is Delete')
                  try:
                      ssm.delete_document(Name=package_name)
                      response_data['Message'] = 'Package deleted successfully'
                      cfnresponse.send(event, context, cfnresponse.SUCCESS, response_data)
                  except Exception as e:
                      logger.error(f'Error deleting package: {e}')
                      response_data['Message'] = 'Error deleting package'
                      cfnresponse.send(event, context, cfnresponse.FAILED, response_data)

              elif eventType == 'Update':
                  logger.info('Event = ' + eventType)
                  response_data['Message'] = 'Package updated successfully'
                  cfnresponse.send(event, context, cfnresponse.SUCCESS, response_data)

  #IAM Role for the CustomAuditManagerFramework Lambda
  CreateSSMDistributorLambdaRole:
    Metadata:
      cfn-lint:
        config:
          ignore_checks:
            - E1019  # False positive for managed policy !Sub function to support gov cloud
            - EIAMPolicyWildcardResource
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: !Sub createssmdistributorlambdarole-${AWS::Region}
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Sid: AllowLambdaAssumeRole
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/AdministratorAccess"
      Policies:
        - PolicyName: CreateSSMDistributorLambdaPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - s3:PutObject
                  - s3:PutBucketLogging
                  - s3:PutBucketVersioning
                  - s3:GetObject
                  - s3:GetBucketLocation
                  - s3:ListBucket
                Resource:
                  - !Sub arn:${AWS::Partition}:s3:::${UptycsSsmPackageBucket}
                  - !Sub arn:${AWS::Partition}:s3:::${UptycsSsmPackageBucket}/${UptycsSsmPackageBucketFolder}/*
              - Effect: Allow
                Action:
                  - ssm:CreateDocument
                  - ssm:DescribeDocument
                  - ssm:DeleteDocument
                  - ssm:ListTagsForResource
                  - ssm:PutParameter
                Resource: '*'