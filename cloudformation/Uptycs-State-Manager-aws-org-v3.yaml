#
# Version 3
# Updates
# Lifecycle event role has less permissive policies
#
AWSTemplateFormatVersion: 2010-09-09
Description: Uptycs State Manager Stack to setup a State Manager 
  Association and Distributor Package in member accounts of an AWS org
Metadata:
  cfn-lint:
    config:
      ignore_checks:
        - E9007  # managed policy does not support partition
        - E9008  # managed policy does not support partition
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: "Existing StackSet Administration and Execution roles"
        Parameters:
          - AdministrationRoleArn
          - ExecutionRoleName
      - Label:
          default: "Uptycs Distributor Package Parameters"
        Parameters:
          - UptycsSsmPackageBucketFolder
          - UptycsSsmPackageName
          - UptycsSsmPackageBucket
      - Label:
          default: "StackSet settings"
        Parameters:
          - UptycsStateManagerStackSet
          - EnabledRegions
          - EnableAllRegions
      - Label:
          default: "Uptycs SSM State Manager Association Parameters"
        Parameters:
          - UptycsAgentTargetKey
          - UptycsAgentTargetValue
          - UptycsScheduleRate
          - MaxConcurrency
          - MaxErrors
          - ComplianceSeverity
    ParameterLabels:
      UptycsStateManagerStackSet:
        default: The Name of the Stackset
      AdministrationRoleArn:
        default: "The ARN of your existing stackset Administration Role eg 
        arn:aws:iam::<account>:role/service-role/<rolename>"
      ExecutionRoleName:
        default: "The NAME of the stackset Execution Role "
      UptycsSsmPackageBucketFolder:
        default: "The folder where the zip and manifest files are located"
      UptycsSsmPackageName:
        default: "The name of the Uptycs distributor package that we will create"
      UptycsSsmPackageBucket:
        default: "The s3 bucket where the manifest and zip files are located"
      UptycsAgentTargetKey:
        default: "The Tag Key Name used to Target instances"
      UptycsScheduleRate:
        default: "The rate as which the association will run"
      UptycsAgentTargetValue:
        default: "The Tag Key Value used to Target instances"
      MaxConcurrency:
        default: "The maximum number of targets allowed to run the association at the same time"
      MaxErrors:
        default: "The number of errors that are allowed before the run stops"
      ComplianceSeverity:
        default: "The severity level that is assigned to the association."
Parameters:
  # Non Default Params
  ## Stackset Roles
  EnabledRegions:
    Type: CommaDelimitedList
    Description: "Enter a comma-delimited list of regions from which you want to collect logs and metric streams. For example: \"us-east-1,eu-central-1,ap-south-1\"."
  EnableAllRegions:
    Description: Create and Share Package in all regions
    Type: String
  ComplianceSeverity:
    Description: The Severity to apply to the State Manager Alert
    Type: String
  AdministrationRoleArn:
    Type: String
    Description: Existing Stackset Administration Role Name
  ExecutionRoleName:
    Type: String
    Description: Existing Stackset Execution Role Name
  UptycsAgentTargetKey:
    Description: Value of the Tag Key used to define the automation target
    Type: String
  UptycsAgentTargetValue:
    Description: Value of the Tag Value used to define the automation target
    Type: String

  # Default Params
  # S3 Bucket for package zip and manifest files
  UptycsSsmPackageBucketFolder:
    Type: String
    Description: Uptycs folder in s3 bucket
    Default: uptycs
  UptycsSsmPackageName:
    Description: Uptycs Distributor package name
    Type: String
    Default: UptycsAgent
  UptycsSsmPackageBucket:
    Description: SSM Distributor package that installs the Uptycs agent
    Type: String
  UptycsScheduleRate:
    Description: SSM association application cycle (minimum 30 minutes)
    Type: String
    Default: 60 minutes
  MaxConcurrency:
    Description: Percentage of total targets that SSM State Manager should run the SSM Automation concurrently
    Type: String
    Default: 100%
  MaxErrors:
    Description: Error threshold percentage before
    Type: String
    Default: 25%
  UptycsStateManagerStackSet:
    Type: String
    Default: 'UptycsStateManagerStackSet'

Resources:
  UptycsMasterAcctAgentStackSet:
    Type: AWS::CloudFormation::StackSet
    Properties:
      ManagedExecution:
        Active: true
      AdministrationRoleARN: !Ref AdministrationRoleArn
      ExecutionRoleName: !Ref ExecutionRoleName
      Description: StackSet for Uptycs Agent Installation
      StackSetName: !Ref UptycsStateManagerStackSet
      TemplateBody: |
        AWSTemplateFormatVersion: 2010-09-09
        Description: Uptycs SSM State Manager Stackset
        Metadata:
          AWS::CloudFormation::Interface:
            ParameterGroups:
              - Label:
                  default: "Uptycs Distributor Package Parameters"
                Parameters:
                  - UptycsSsmPackageName
              - Label:
                  default: "Uptycs SSM Association Parameters"
                Parameters:
                  - UptycsAgentTargetKey
                  - UptycsAgentTargetValue
                  - UptycsScheduleRate
                  - MaxConcurrency
                  - MaxErrors
                  - ComplianceSeverity
            ParameterLabels:
              UptycsSsmPackageName:
                default: Uptycs Package name as it appears in the console
              UptycsAgentTargetKey:
                default: "The Tag Key Name used to Target instances"
              UptycsScheduleRate:
                default: "The rate as which the association will run"
              UptycsAgentTargetValue:
                default: "The Tag Key Value used to Target instances"
              MaxConcurrency:
                default: "The maximum number of targets allowed to run the association at the same time"
              MaxErrors:
                default: "The number of errors that are allowed before the run stops"
              ComplianceSeverity:
                default: "The severity level that is assigned to the association."
        Parameters:
          UptycsSsmPackageName:
            Description: Uptycs Distributor package name
            Type: String
            Default: UptycsAgent
          UptycsAgentTargetKey:
            Description: Value of the Tag Key used to define the automation target
            Default: "SENSOR_DEPLOY"
            Type: String
          UptycsAgentTargetValue:
            Description: Value of the Tag Value used to define the automation target
            Default: "TRUE"
            Type: String
          UptycsScheduleRate:
            Description: SSM association application cycle (minimum 30 minutes)
            Type: String
            Default: 60 minutes
          MaxConcurrency:
            Description: Percentage of total targets that SSM State Manager should run the SSM Automation concurrently
            Type: String
            Default: 100%
          MaxErrors:
            Description: Error threshold percentage before
            Type: String
            Default: 25%
          ComplianceSeverity:
            Description: The Severity to apply to the State Manager Alert
            Type: String
            AllowedValues:
              - 'CRITICAL'
              - 'HIGH'
              - 'LOW'
              - 'MEDIUM'
              - 'UNSPECIFIED'
        Resources:
          # SSM Association
          UptycsSSMAssociation:
            Type: AWS::SSM::Association
            Properties:
              Name: 'AWS-ConfigureAWSPackage'
              Targets:
                - Key: !Sub tag:${UptycsAgentTargetKey}
                  Values:
                    - !Ref UptycsAgentTargetValue

              ScheduleExpression: !Sub rate(${UptycsScheduleRate})
              Parameters:
                action:
                  - 'Install'
                additionalArguments:
                  - '{}'
                installationType:
                  - 'Uninstall and reinstall'
                name:
                  - 'UptycsAgent'
              AssociationName: 'Uptycs'
              ComplianceSeverity: !Ref ComplianceSeverity
              ApplyOnlyAtCronInterval: false
              MaxConcurrency: !Ref MaxConcurrency
              MaxErrors: !Ref MaxErrors
          # SSM Automation Document to install SSM Distribution
          UptycsAgentDeploymentSSMDocument:
            Type: AWS::SSM::Document
            Properties:
              Name: UptycsAutomationDoc
              DocumentType: Automation
              Content:
                description: Run Document for installing the Uptycs osquery agent .
                schemaVersion: '0.3'
                assumeRole: '{{AutomationAssumeRole}}'
                parameters:
                  AWSRegion:
                    type: String
                  InstallerParams:
                    type: String
                    default: ''
                    description: (Optional) .
                  Action:
                    type: String
                    allowedValues:
                      - Install
                      - Uninstall
                    description: (Required) Specify whether or not to install or uninstall the package.
                    default: Install
                  InstallationType:
                    type: String
                    allowedValues:
                      - Uninstall and reinstall
                    description: '(Optional) Specify the type of installation. Uninstall and 
        reinstall: The application is taken offline until the re installation process completes. 
        In-place update: The application is available while new or updated files are added to the installation.'
                    default: Uninstall and reinstall
                  PackageName:
                    type: String
                    description: 'Uptycs package name.'
                    default: !Ref UptycsSsmPackageName
                  PackageVersion:
                    type: String
                    description: 'Package Version'
                    default: ''
                  InstanceIds:
                    type: StringList
                  Targets:
                    type: MapList
                    default: [ ]
                  AutomationAssumeRole:
                    type: String
                mainSteps:
                  - name: ExecuteDistributorPackage
                    action: 'aws:runCommand'
                    inputs:
                      Targets: '{{ Targets }}'
                      InstanceIds: '{{ InstanceIds }}'
                      DocumentName: AWS-ConfigureAWSPackage
                      Parameters:
                        name: '{{PackageName}}'
                        action: '{{Action}}'
                        version: '{{PackageVersion}}'
          # IAM Role for SSM Automation Document
          SSMAutomationAssumeRole:
            Type: AWS::IAM::Role
            Properties:
              Description: "Uptycs agent install role"
              Path: /
              AssumeRolePolicyDocument:
                Version: '2012-10-17'
                Statement:
                  - Effect: Allow
                    Principal:
                      Service: ssm.amazonaws.com
                    Action: sts:AssumeRole
              ManagedPolicyArns:
                - !Sub "arn:${AWS::Partition}:iam::aws:policy/AdministratorAccess"


      Parameters:
        - ParameterKey: UptycsSsmPackageName
          ParameterValue: !Ref UptycsSsmPackageName
        - ParameterKey: UptycsAgentTargetKey
          ParameterValue: !Ref UptycsAgentTargetKey
        - ParameterKey: UptycsAgentTargetValue
          ParameterValue: !Ref UptycsAgentTargetValue
        - ParameterKey: UptycsScheduleRate
          ParameterValue: !Ref UptycsScheduleRate
        - ParameterKey: MaxConcurrency
          ParameterValue: !Ref MaxConcurrency
        - ParameterKey: MaxErrors
          ParameterValue: !Ref MaxErrors
        - ParameterKey: ComplianceSeverity
          ParameterValue: !Ref ComplianceSeverity
      Capabilities:
        - CAPABILITY_NAMED_IAM
      PermissionModel: SELF_MANAGED
#      StackInstancesGroup:
#          - DeploymentTargets:
#              Accounts:
#                - !Ref "AWS::AccountId"
#            Regions: !Ref EnabledRegions
  #IAM Role for the SSMDistributorSharerLambdaRole Lambda
  SSMDistributorSharerLambdaRole:
    Metadata:
      cfn-lint:
        config:
          ignore_checks:
            - E1019  # False positive for managed policy !Sub function to support gov cloud
            - EIAMPolicyWildcardResource
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Sid: AllowLambdaAssumeRole
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - !Sub "arn:${AWS::Partition}:iam::aws:policy/AdministratorAccess"
  CreateSSMDistributorLambda:
    Type: 'AWS::Lambda::Function'
    Properties:
      Handler: index.handler
      Runtime: python3.7
      Timeout: 120
      MemorySize: 512
      Role: !GetAtt 'SSMDistributorSharerLambdaRole.Arn'

      Code:
        ZipFile: |
          """ Handles the sharing and removal of packages in org master acct"""
          import logging
          from typing import List
          import boto3
          import cfnresponse
          from boto3.session import Session
          
          logger = logging.getLogger()
          logger.setLevel(logging.INFO)
          
          
          def get_regions() -> List['str']:
              """
              Gets a list of AWS regions.
          
              Returns:
                  str: A JSON list of region names.
              """
              ec2_client = boto3.client('ec2')
              response = ec2_client.describe_regions()
              # Extract the region names from the response and create a JSON list
              regions = [region['RegionName'] for region in response['Regions']]
              return regions
          
          
          def get_all_member_accounts(this_account) -> List[str]:
              """
              Get all the accounts in the org with the exception of the master and current acct.  Exclude
              the current account as well as master (assumes that if master != current then using a
              delegated account
              """
              # Initialize the session and client
              session = boto3.Session()
              org_client = session.client('organizations')
              # Create a Paginator for the 'list_accounts' API operation
              paginator = org_client.get_paginator('list_accounts')
              max_results = 20
              account_ids = []
              # Get the ID of the master account
              list_response = org_client.list_roots()
              root_id = list_response['Roots'][0]['Id']
              acct_response = org_client.list_accounts_for_parent(ParentId=root_id)
              master_account_id = acct_response['Accounts'][0]['Id']
          
              # Iterate over the pages of results using the Paginator
              for page in paginator.paginate(MaxResults=max_results):
                  # Extract the account IDs from the current page, excluding the master account ID
                  account_ids += [account['Id'] for account in page['Accounts'] if account['Id'] !=
                                  master_account_id or account['Id'] !=
                                  this_account]
          
              # Return the list of member account IDs
              return account_ids
          
          
          def modify_document_permission(ssm_local: Session.client, package_name: str, permission_type: str,
                                         account_ids: List['str']) -> bool:
              """
              Args:
                  ssm_local (): boto3 ssm session client
                  package_name (): Package Name
                  permission_type (): Share or Remove
                  account_ids (): list of accounts
          
              Returns: True False
          
              """
              try:
                  logger.debug('modify_document_permission got account_ids {}'.format(account_ids))
                  account_id_chunks = [account_ids[i:i + 20] for i in range(0, len(account_ids), 20)]
                  for account_ids_chunk in account_id_chunks:
                      if permission_type == 'Share':
                          response = ssm_local.modify_document_permission(
                              Name=package_name,
                              PermissionType='Share',
                              AccountIdsToAdd=account_ids_chunk
                          )
                      else:
                          response = ssm_local.modify_document_permission(
                              Name=package_name,
                              PermissionType='Share',
                              AccountIdsToRemove=account_ids_chunk
                          )
                      if response['ResponseMetadata']['HTTPStatusCode'] != 200:
                          logger.error('Failed to modify %s permissions for package %s', permission_type,
                                       package_name)
                          return False
                  return True
              except Exception as error:  # pylint: disable=W0718:
                  logger.error('Failed to modify %s permissions for package %s. Error: %s', permission_type,
                               package_name, error)
                  return False
          
          
          def delete_package_in_regions(region_list: List['str'],
                                        package_name: str,
                                        org_member_accounts: List['str']) -> bool:
              """
          
              Args:
                  region_list (): AWS region list
                  package_name (): Package Name
                  org_member_accounts (): list of AWS accounts
          
              Returns: True Will make best effort to delete package in region
          
              """
              for region in region_list:
                  try:
                      ssm_local = boto3.client('ssm', region_name=region)
                      # Remove sharing from member accounts
                      modify_document_permission(ssm_local, package_name, 'Remove', org_member_accounts)
                      del_response = ssm_local.delete_document(Name=package_name)
                      if del_response['ResponseMetadata']['HTTPStatusCode'] == 200:
                          logger.info('Deleted package in region %s', region)
                  except Exception as error:  # pylint: disable=W0718:
                      logger.error('Error deleting package: %s in region %s', error, region)
          
              return True
          
          
          def share_package_in_regions(region_list: List['str'], package_name: str,
                                       s3_bucket: str, s3_prefix: str,
                                       org_member_accounts: List['str']) -> bool:
              """
          
              Args:
                  region_list (): list of AWS regions
                  package_name (): Distributor Package Name
                  s3_bucket (): Bucket where zip files are stored
                  s3_prefix (): Prefix for files
                  org_member_accounts (): list of AWS accounts to share package with
          
              Returns: True / False
          
              """
              # Create an S3 client
              s3_client = boto3.client('s3')
          
              # Retrieve the manifest file from S3
              manifest_file = s3_prefix + "/manifest.json"
              try:
                  file_object = s3_client.get_object(Bucket=s3_bucket, Key=manifest_file)
                  manifest_str = file_object['Body'].read().decode('utf-8')
              except Exception as error:  # pylint: disable=W0718:
                  logger.info('Error retrieving %s from S3: %s', manifest_file, error)
                  return False
          
              for region in region_list:
                  # Create an SSM client for the current region
                  ssm_local = boto3.client('ssm', region_name=region)
          
                  # Create the SSM Distributor package
                  try:
                      response = ssm_local.create_document(
                          Name=package_name,
                          DocumentType='Package',
                          Content=manifest_str,
                          Attachments=[
                              {
                                  'Key': 'SourceUrl',
                                  'Values': [
                                      f'https://{s3_bucket}.s3.amazonaws.com/{s3_prefix}',
                                  ]
                              },
                          ],
                      )
                      # Modify the share permissions to include all member accounts
                      if not response.get('DocumentDescription'):
                          continue
                      if modify_document_permission(ssm_local, package_name, 'Share',
                                                    org_member_accounts):
                          logger.info('Shared %s with accounts %s in region %s', package_name,
                                      org_member_accounts, region)
                  except Exception as error:  # pylint: disable=W0718:
                      logger.error('Error creating SSM Distributor package in %s: %s', region, error)
          
              return True
          
          
          def handler(event, context):
              """Main function"""
              logger.info('EVENT Received: %s', event)
              package_name = event['ResourceProperties']['package_name']
              s3_bucket = event['ResourceProperties']['s3_bucket']
              s3_prefix = event['ResourceProperties']['s3_prefix']
              region_list = event['ResourceProperties']['region_list']
              this_account = event['ResourceProperties']['this_account']
              all_regions = event['ResourceProperties']['all_regions']
          
              # Get all accounts in this org except current and master account.
              org_member_accounts = get_all_member_accounts(this_account)
          
              # Get all regions
              if all_regions == 'true':
                  region_list = get_regions()
          
              response_data = {}
              event_type = event['RequestType']
              if event_type == 'Create':
                  try:
                      logger.info('Event = %s', event_type)
          
                      # Create and share package
                      if share_package_in_regions(region_list, package_name, s3_bucket, s3_prefix,
                                                  org_member_accounts):
                          response_data['Message'] = 'Package created successfully'
                      else:
                          response_data['Message'] = 'Failed to create packages check the function logs'
                      cfnresponse.send(event, context, cfnresponse.SUCCESS, response_data)
                  except Exception as error:  # pylint: disable=W0718:
                      logger.info('Error creating package: %s', error)
                      response_data['Message'] = 'Error creating package'
                      cfnresponse.send(event, context, cfnresponse.FAILED, response_data)
          
              elif event_type == 'Delete':
                  if delete_package_in_regions(region_list, package_name, org_member_accounts):
                      response_data['Message'] = 'Deleted Packages successfully'
                  else:
                      response_data['Message'] = 'Failures deleting packages'
                  cfnresponse.send(event, context, cfnresponse.SUCCESS, response_data)
          
              elif event_type == 'Update':
                  response_data['Message'] = 'Package updated successfully'
                  cfnresponse.send(event, context, cfnresponse.SUCCESS, response_data)
  CreateSSMDistributorPackage:
    Type: 'Custom::CreateSSMDistributorPackage'
    Properties:
      ServiceToken: !GetAtt 'CreateSSMDistributorLambda.Arn'
      package_name: !Ref UptycsSsmPackageName
      s3_bucket: !Ref UptycsSsmPackageBucket
      s3_prefix: !Ref UptycsSsmPackageBucketFolder
      region_list: !Ref EnabledRegions
      this_account: !Ref AWS::AccountId
      all_regions: !Ref EnableAllRegions


  LifecycleEventLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      Description: Role used by Lambda to trigger the lambda lifecycle
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "lambda.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Policies:
        - PolicyName: LambdaExecutionRoleAssumePolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Sid: Regions
                Effect: Allow
                Action: ec2:DescribeRegions
                Resource: "*"
              - Sid: Cloudformation
                Effect: Allow
                Action:
                  - cloudformation:CreateStackInstances
                  - cloudformation:DescribeStackSet
                  - cloudformation:DescribeStackInstance
                  - cloudformation:ListStackInstances
                Resource:
                  - !Sub arn:${AWS::Partition}:cloudformation:${AWS::Region}:${AWS::AccountId}:stackset/UptycsStateManagerStackSet:*
              - Sid: ssm
                Effect: Allow
                Action:
                  - ssm:ModifyDocumentPermission
                Resource:
                  - !Sub arn:${AWS::Partition}:ssm:${AWS::Region}:${AWS::AccountId}:document/${UptycsSsmPackageName}
              - Sid: sts
                Effect: Allow
                Action:
                  - sts:AssumeRole
                Resource:
                  - !Ref AdministrationRoleArn
      ManagedPolicyArns:
        - !Sub "arn:${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"

  CreateAccountRule:
    Type: AWS::Events::Rule
    Properties:
      Name: Account-lifecycle
      Description: Event rule for CreateManagedAccount events
      EventPattern:
        source:
          - aws.organizations
        detail-type:
          - AWS API Call via CloudTrail
        detail:
          eventSource:
            - organizations.amazonaws.com
          eventName:
            - CreateManagedAccount
            - UpdateManagedAccount
      Targets:
        - Arn: !GetAtt AcctLifecycleLambda.Arn
          Id: MyLambdaFunctionTarget


  AcctLifecycleLambda:
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.lambda_handler
      Runtime: python3.7
      Timeout: 30
      MemorySize: 512
      Role: !GetAtt LifecycleEventLambdaRole.Arn
      Environment:
        Variables:
          region_list: !Join [',',!Ref EnabledRegions]
          all_regions: !Ref EnableAllRegions
          package_name: !Ref UptycsSsmPackageName
          stackset_name: !Ref UptycsStateManagerStackSet
      Code:
        ZipFile: |
          """ Lambda function for account lifecycles"""

          import boto3
          import logging
          import os
          from typing import List
          from boto3.session import Session
          logger = logging.getLogger()
          logger.setLevel(logging.INFO)


          session = boto3.Session()

          # Read deployment regions from Env values set in stack parameters during creation
          region_list_str = os.environ['region_list']
          all_regions = os.environ['all_regions']
          package_name = os.environ['package_name']
          stackset_name = os.environ['stackset_name']

          def get_regions() -> List['str']:
              """
              Gets a list of AWS regions.

              Returns:
                  str: A JSON list of region names.
              """
              ec2_client = boto3.client('ec2')
              response = ec2_client.describe_regions()
              # Extract the region names from the response and create a JSON list
              regions = [region['RegionName'] for region in response['Regions']]
              return regions


          def lambda_handler(event, context):
              masterAcct = event['account']
              event_details = event['detail']
              this_aws_region = event_details['awsRegion']
              event_name = event_details['eventName']
              srv_event_details = event_details['serviceEventDetails']
              if all_regions == 'true':
                  deployment_regions  = get_regions()
              else:
                  deployment_regions = region_list_str.split(',')
              logger.info('Deployment regions are {} type {}'.format(deployment_regions, type(deployment_regions)))
              if event_name == 'CreateManagedAccount' or event_name == 'UpdateManagedAccount':
                  new_acct_data = {}
                  logger.info('Event Processed Successfully')
                  if event_name == 'CreateManagedAccount':
                      new_acct_data = srv_event_details['createManagedAccountStatus']
                  if event_name == 'UpdateManagedAccount':
                      new_acct_data = srv_event_details['updateManagedAccountStatus']
                  cmd_status = new_acct_data['state']
                  if cmd_status == 'SUCCEEDED':
                      '''Successful event received'''
                      account_id = new_acct_data['account']['accountId']
                      # Add account to package share list
                      ssm_local = boto3.client('ssm', region_name=this_aws_region)
                      if modify_document_permission(ssm_local, package_name, 'Share', account_id):
                          logger.info("Update Package Share permissions with new account {}".format(account_id))
                      cloudformation = boto3.client('cloudformation')
                      logging.debug('Processing regions {}'.format(deployment_regions))
                      try:
                          result = cloudformation.create_stack_instances(StackSetName=stackset_name,
                                                                         Accounts=[account_id],
                                                                         Regions=deployment_regions,
                                                                          OperationPreferences={
                                                                        'RegionConcurrencyType': 'PARALLEL'})
                          logger.info('Processed {} Successfully'.format(stackset_name))
                          ssm_local = boto3.client('ssm', region_name=this_aws_region)

                      except Exception as error:
                          logger.error('Unable to launch in:{}, REASON: {}'.format(stackset_name, error))

                  else:
                      logger.info('Acct status is {}'.format(cmd_status))            

              else:
                  '''Unsuccessful event received'''
                  logger.info('Unsuccessful Event Received. SKIPPING :{}'.format(event))
                  return (False)



          def modify_document_permission(ssm_local: Session.client, package_name: str, permission_type: str,
                                     account_ids: List['str']) -> bool:
              """
              Args:
                  ssm_local (): boto3 ssm session client
                  package_name (): Package Name
                  permission_type (): Share or Remove
                  account_ids (): list of accounts

              Returns: True False

              """
              try:

                  response = ssm_local.modify_document_permission(
                      Name=package_name,
                      PermissionType='Share',
                      AccountIdsToAdd=[account_ids]
                  )

                  if response['ResponseMetadata']['HTTPStatusCode'] != 200:
                      logger.error('Failed to modify %s permissions for package %s', permission_type,
                                   package_name)

                  return True
              except Exception as error:  # pylint: disable=W0718:
                  logger.error('Failed to modify %s permissions for package %s. Error: %s', permission_type,
                               package_name, error)
                  return False

